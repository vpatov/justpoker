- start game functionality 
- actual game play functionality (MVP)
- determine how to best use functional/redux patterns and avoid anti-pattern usage
- coordinate interfaces/models with UI and jules
- Design timing aspect of gameplay
- It seems like the gameStateManager file is going to become very bloated. Find the best way to ameliorate this.
- Integrate https://github.com/goldfire/pokersolver for hand solving
- cleaner design would be to allow gameStateManager to assume that all operations it is being asked to perform are legal. Insert a validation layer between the messageService and the gameStateManager. 


Done:
- server fetches connected client and associates it with websocket via cookie
- Map object is problematic to serialize to JSON. Consider replacing it with a simple object. Just be sure that it doesn't become a tricky soruce of bugs later. 
- Create filter that removes sensitive data from gameState object before sending it to UI (cards, cookies, etc)
